{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Markdown Changelog Generator","text":"<p>Generate a Markdown changelog from your Github repository.</p> <p> </p> <p>This project will automatically generate a Markdown-formatted changelog from a Github repository. It will automatically detect the latest release and generate a changelog based on the merged Pull Requests since that release along with a section for unmerged PRs at the top. It will also include a list of all Issues closed for each release.</p> <p>The PRs and issues are grouped by type (bug, enhancement, etc.) and sorted by latest to oldest in this release.</p> <p>For an example of the output, see the Changelog for this project.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#020-2023-10-21","title":"0.2.0 (2023-10-21)","text":"<p>Closed Issues</p> <ul> <li>add a '--next-release' flag which will create a virtual release containing all PRs that have been merged since the last release. (#35) by seapagan</li> <li>Try to take repo name from the current folder if it is a git repo (#34) by seapagan</li> <li>include closed issues in the changelog, linked to the PR that closed them. (#31) by seapagan</li> <li>Finish Documentation (#30) by seapagan</li> <li>Add testing with Pytest (#29) by seapagan</li> <li>Any PR with a dunder string in the title will have that formatted as Bold instead of printed as is. (#22) by seapagan</li> </ul> <p>Merged Pull Requests</p> <ul> <li>Add Unit testing with pytest (#42) by seapagan</li> </ul> <p>Enhancements</p> <ul> <li>List closed issues (#38) by seapagan</li> <li>Add the '--next-release' option (#37) by seapagan</li> <li>Get repo name from local if possible (#36) by seapagan</li> <li>Prompt for PAT if config file is missing (#33) by seapagan</li> <li>Sort prs into sections based on their labels (#23) by seapagan</li> <li>Tweak release layout (#21) by seapagan</li> <li>Use local config file (#20) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>fix bug #22 (#24) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Create release docs (#32) by seapagan</li> <li>Start working on docs (#17) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.10.0 to 19.11.0 (#41) by dependabot[bot]</li> <li>Bump mypy from 1.6.0 to 1.6.1 (#40) by dependabot[bot]</li> <li>Bump gitpython from 3.1.37 to 3.1.38 (#28) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.2 to 2.5.1 (#27) by dependabot[bot]</li> <li>Bump black from 23.9.1 to 23.10.0 (#26) by dependabot[bot]</li> <li>Bump urllib3 from 2.0.6 to 2.0.7 (#25) by dependabot[bot]</li> <li>Bump mkdocs-git-revision-date-localized-plugin from 1.2.0 to 1.2.1 (#19) by dependabot[bot]</li> <li>Bump simple-toml-settings from 0.2.0 to 0.2.2 (#18) by dependabot[bot]</li> <li>Bump pylint from 2.17.7 to 3.0.1 (#16) by dependabot[bot]</li> <li>Bump faker from 19.9.0 to 19.10.0 (#15) by dependabot[bot]</li> <li>Bump pygithub from 1.59.1 to 2.1.1 (#14) by dependabot[bot]</li> <li>Bump pylint-pydantic from 0.2.4 to 0.3.0 (#13) by dependabot[bot]</li> <li>Bump faker from 19.8.0 to 19.9.0 (#12) by dependabot[bot]</li> <li>Bump mypy from 1.5.1 to 1.6.0 (#11) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.1 to 2.4.2 (#9) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.1 to 9.4.4 (#8) by dependabot[bot]</li> <li>Bump urllib3 from 2.0.5 to 2.0.6 (#6) by dependabot[bot]</li> <li>Bump pylint from 2.17.5 to 2.17.7 (#5) by dependabot[bot]</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-github-changelog-generator","title":"Contributing to GitHub Changelog Generator","text":"<p>Thank you for your interest in contributing to <code>github-changelog-md</code>! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager.</p> </li> <li> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> </li> <li> <p>This project requires Python 3.9 or higher.</p> </li> <li> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p> </li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set the use their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing.</p> <p>At the moment the test framework is set up but we only about 50% coverage. We will be adding more tests as we go along - and most definitely welcome any contributions to this area!</p> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions. Currently we are not enforcing this until we have better coverage of the code.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, using this project, so please do not edit it manually.</p> <p>There is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>you also need to add a GitHub Personal Access Token to the config file. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in your Pull Requests. This will be handled by the maintainers when a new release is made.</p>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to <code>github-changelog-md</code>:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. Black   is installed and this is the format we are using.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also. Flake8 is installed and   there are a few other linters that are run as well.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>If you add or change any functionality, please update the documentation   accordingly.</li> <li>Use GitHub issues to report   bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code> one is a must though.</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"installation/","title":"Installation","text":"<p>It is possible to install this package both locally within your projects and globally so it can be used in every project. You also need to generate a GitHub Personal Access Token (PAT) to use this tool or use an existing one. This should be stored in a config file <code>.changelog-generator.toml</code> in the directory you run the tool from.</p>"},{"location":"installation/#locally-for-a-project","title":"Locally for a project","text":"<p>Change to your project directory and install the package using your preferred package manager or plain <code>pip</code>.</p> <p>I'd recommend using Poetry for managing your project dependencies if you don't already have a preference:</p> <pre><code>$ poetry add github-changelog-md --group dev\n</code></pre> <p>or</p> <pre><code>$ pip install github-changelog-md\n</code></pre>"},{"location":"installation/#globally","title":"Globally","text":"<p>Install the package globally using pip:</p> <pre><code>$ pip install github-changelog-md\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user github-changelog-md\n</code></pre> <p>or use pipx (recommended)</p> <pre><code>$ pipx install github-changelog-md\n</code></pre>"},{"location":"installation/#setup-a-github-pat","title":"Setup a GitHub PAT","text":"<p>Since this tool uses the GitHub API, you will need to create a Personal Access Token (PAT) to use this tool without being rate limited. You can create a PAT with the <code>repo</code> scope to access private repositories, or just leave all the scopes unchecked to only access public repositories. Generate a 'classic' token unless you need more fine-grained control over the permissions.</p> <p>Choose a descriptive name for your token, such as <code>github-changelog-md</code>, an expiry time (or choose to not have it expire at all) and copy the token to your clipboard.</p>"},{"location":"installation/#pat-permissions","title":"PAT Permissions","text":"<p>At this time the tool does not require any special permissions, but in the future we plan to offer the ability to create an actual release from the command line. To do this, the PAT will need either the <code>public_repo</code> scope (you only plan to use this on public repositories) or the <code>repo</code> scope (you also plan to use this on private repositories).</p>"},{"location":"installation/#create-a-config-file","title":"Create a config file","text":"<p>This tool will look for a config file <code>.changelog-generator.toml</code> in the location it is run from. The config file is a simple TOML file with the following format:</p> <pre><code>[changelog_generator]\nschema_version = 1\ngithub_pat = \"your_github_pat\"\n</code></pre> <p>The easiest way to create this is run the app, you will be prompted for the PAT and the config file will be created for you in the current folder then the app will continue.</p> <pre><code>$ github-changelog-md\n</code></pre> <p>Note</p> <p>Future versions of this tool may require a newer schema version, so it is recommended to always use the latest version.</p> <p>It is also planned to have a global config file in the user's home folder, with the settings from the local config file being merged with the global config file. This will allow you to set the PAT once and use it for all projects.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"todo_list/","title":"Todo List","text":""},{"location":"todo_list/#planned-features","title":"Planned features","text":"<p>For now, just some notes to myself. Not all of these will (or should!) be implemented but it's good to have a list of ideas.</p> <ul> <li>Add testing with <code>pytest</code></li> <li>Allow custom sections in the output, set by <code>label</code> or a regex.</li> <li>Allow custom ordering of sections.</li> <li>Allow custom output formats (e.g. HTML, Markdown, PDF, LaTeX, etc.).</li> <li>Ability to only update changes and leave the rest of the file untouched   (allows user customization to the CHANGELOG).</li> <li>Ability to specify a custom CHANGELOG file (e.g. <code>HISTORY.md</code> or   <code>CHANGES.md</code>).</li> <li>Ability to specify a custom template layout.</li> <li>Ability to upload the CHANGELOG to a remote server.</li> <li>Allow filtering of commits based on commit message or other criteria.</li> <li>Allow customization of the commit message format in the changelog.</li> <li>Allow customization of the date format in the changelog.</li> <li>Add support for generating changelogs for specific time periods (e.g. last   week, last month, etc.)</li> <li>Add support for generating changelogs for specific contributors, authors or   teams.</li> <li>add ability to create a new release on GitHub with the latest changelog text   as the body.</li> <li>add some form of text or even block to the oldest release that says something   like \"First release\" or \"Initial release\" or \"Initial commit\" or something   (configurable) to indicate that this is the first release and nothing to   compare to. Optionally hide all PR, Issue and commit links in this release.</li> <li>add ability to place a section between releases with custom markdown, eg to   explain changes in the version numbering scheme or other important   information.</li> <li>if there are no PR for a specific release then say something to that effect   instead of just leaving the section empty. We already use the Release 'body'   for this, but if that is missing too we need to say something.</li> <li>option to change PR/Issue/Commit links to use the GitHub autolink syntax   instead of explicitly linking to the GitHub page.</li> <li>delete extra line-breaks from end of generated file.</li> <li>put the 'dependency'-tagged PR's in a collapsable list at the bottom of the   release, to avoid cluttering the changelog with a bunch of Dependabot PRs.   [<code>This would be very useful however it breaks loading the CHANGELOG directly   into MkDocs as it marks this up as a collapsable boxed section and mangles the   formatting.</code>]</li> <li>offer the ability to collapse other sections (or all sections) too. [<code>See   Above</code>]</li> <li>add a flag eg [no changelog] to PR titles to allow skipping of PRs that don't   need to be in the changelog.</li> <li>For using the tool in a CI/CD pipeline, allow setting the <code>GITHUB_PAT</code>   environment variable instead of creating a config file.</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>Simply run the tool in the folder of a git repository and it will generate a <code>CHANGELOG.md</code> file in the current folder. You can specify the name of the repository you want to generate the changelog for using the <code>--repo</code> or <code>-r</code> option:</p> <pre><code>$ github-changelog-md --repo &lt;repo-name&gt;\n</code></pre> <p>Automatic repository name detection</p> <p>If you do not specify a repository name, the tool will try to determine the repository name from the current folder if it is a git repository. Failing that it will exit.</p> <p>Just run the command from the root of the repository you want to generate the changelog for, with no options:</p> <pre><code>$ github-changelog-md\n</code></pre> <p>This works for any repository that is linked to your username (determined from the PAT), however if you want to generate a changelog for a repository that is not linked to your username, you can specify the repository owner using the <code>--user</code> or <code>-u</code> option.</p> <pre><code>$ github-changelog-md --user &lt;repo-owner&gt; --repo &lt;repo-name&gt;\n</code></pre> <p>As mentioned in the Installation section, you will be prompted for your GitHub PAT the first time you run the tool, and a config file will be created in the current folder if it does not already exist.</p>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":"<p>There are some options you can use to customize the output of the tool.</p>"},{"location":"usage/#-next-release-n","title":"<code>--next-release</code> \\ <code>-n</code>","text":"<p>This option allows you to specify the name of the next release. By default, any PRs that are merged after the last existing release will be added to the <code>Unreleased</code> section of the changelog. If you specify a value for this option, the tool will create a new section with the specified name and add the PRs to that section instead.</p> <p>Useful to prep for a release before it is actually released.</p> <pre><code>$ github-changelog-md --next-release 1.2.3\n</code></pre>"},{"location":"usage/#future-plans","title":"Future plans","text":"<p>At this time the tool does not have many options or configuration, but in the future we plan to add a lot of options to customize the output. See the Todo List for planned features.</p>"}]}