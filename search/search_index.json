{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Markdown Changelog Generator","text":"<p>Pre-release docs</p> <p>This is pre-release documentation for the next version of this project which will be released soon. It is not yet available in the current PyPI release, though you can install it from the <code>main</code> branch on Github. Link is above in the header. Also, some features mentioned in these docs may not be fully implemented even in the development version.</p> <p>Generate a Markdown changelog from your Github repository.</p> <p>This project will automatically generate a Markdown-formatted changelog from a Github repository. It will automatically detect the latest release and generate a changelog based on the merged Pull Requests since that release along with a section for unmerged PRs at the top. It will also include a list of all issues and PRs closed since the last release.</p> <p>The PRs and issues are grouped by type (bug, enhancement, etc.) and sorted by latest to oldest in this release. Any Issues that were closed during this release are also listed.</p> <p>For an example of the output, see the Changelog for this project.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Enhancements</p> <ul> <li>Sort prs into sections based on their labels (#23) by seapagan</li> <li>Tweak release layout (#21) by seapagan</li> <li>Use local config file (#20) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>fix bug #22 (#24) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Start working on docs (#17) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump gitpython from 3.1.37 to 3.1.38 (#28) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.2 to 2.5.1 (#27) by dependabot[bot]</li> <li>Bump black from 23.9.1 to 23.10.0 (#26) by dependabot[bot]</li> <li>Bump urllib3 from 2.0.6 to 2.0.7 (#25) by dependabot[bot]</li> <li>Bump mkdocs-git-revision-date-localized-plugin from 1.2.0 to 1.2.1 (#19) by dependabot[bot]</li> <li>Bump simple-toml-settings from 0.2.0 to 0.2.2 (#18) by dependabot[bot]</li> <li>Bump pylint from 2.17.7 to 3.0.1 (#16) by dependabot[bot]</li> <li>Bump faker from 19.9.0 to 19.10.0 (#15) by dependabot[bot]</li> <li>Bump pygithub from 1.59.1 to 2.1.1 (#14) by dependabot[bot]</li> <li>Bump pylint-pydantic from 0.2.4 to 0.3.0 (#13) by dependabot[bot]</li> <li>Bump faker from 19.8.0 to 19.9.0 (#12) by dependabot[bot]</li> <li>Bump mypy from 1.5.1 to 1.6.0 (#11) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.1 to 2.4.2 (#9) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.1 to 9.4.4 (#8) by dependabot[bot]</li> <li>Bump urllib3 from 2.0.5 to 2.0.6 (#6) by dependabot[bot]</li> <li>Bump pylint from 2.17.5 to 2.17.7 (#5) by dependabot[bot]</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>It is possible to install this package both locally within your projects and globally so it can be used in every project. You also need to generate a GitHub Personal Access Token (PAT) to use this tool or use an existing one. This should be stored in a config file <code>.changelog-generator.toml</code> in the directory you run the tool from.</p>"},{"location":"installation/#locally-for-a-project","title":"Locally for a project","text":"<p>Change to your project directory and install the package using your preferred package manager or plain <code>pip</code>.</p> <p>I'd recommend using Poetry for managing your project dependencies if you don't already have a preference:</p> <pre><code>$ poetry add github-changelog-md --group dev\n</code></pre> <p>or</p> <pre><code>$ pip install github-changelog-md\n</code></pre>"},{"location":"installation/#globally","title":"Globally","text":"<p>Install the package globally using pip:</p> <pre><code>$ pip install github-changelog-md\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user github-changelog-md\n</code></pre> <p>or use pipx (recommended)</p> <pre><code>$ pipx install github-changelog-md\n</code></pre>"},{"location":"installation/#setup-a-github-pat","title":"Setup a GitHub PAT","text":"<p>Since this tool uses the GitHub API, you will need to create a Personal Access Token (PAT) to use this tool without being rate limited. You can create a PAT with the <code>repo</code> scope to access private repositories, or just leave all the scopes unchecked to only access public repositories. Generate a 'classic' token unless you need more fine-grained control over the permissions.</p> <p>Choose a descriptive name for your token, such as <code>github-changelog-md</code>, an expiry time (or choose to not have it expire at all) and copy the token to your clipboard.</p>"},{"location":"installation/#pat-permissions","title":"PAT Permissions","text":"<p>At this time the tool does not require any special permissions, but in the future we plan to offer the ability to create an actual release from the command line. To do this, the PAT will need either the <code>public_repo</code> scope (you only plan to use this on public repositories) or the <code>repo</code> scope (you also plan to use this on private repositories).</p>"},{"location":"installation/#create-a-config-file","title":"Create a config file","text":"<p>This tool will look for a config file <code>.changelog-generator.toml</code> in the location it is run from. The config file is a simple TOML file with the following format:</p> <pre><code>[changelog_generator]\nschema_version = 1\ngithub_pat = \"your_github_pat\"\n</code></pre> <p>The easiest way to create this is run the app, you will be prompted for the PAT and the config file will be created for you in the current folder then the app will continue.</p> <pre><code>$ github-changelog-md\n</code></pre> <p>Note</p> <p>Future versions of this tool may require a newer schema version, so it is recommended to always use the latest version.</p> <p>It is also planned to have a global config file in the user's home folder, with the settings from the local config file being merged with the global config file. This will allow you to set the PAT once and use it for all projects.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"todo_list/","title":"Todo List","text":""},{"location":"todo_list/#planned-features","title":"Planned features","text":"<p>For now, just some notes to myself. Not all of these will (or should!) be implemented but it's good to have a list of ideas.</p> <ul> <li>Add testing with <code>pytest</code></li> <li>Get repo information from the current directory, read from the <code>.git</code> folder.   If this is missing (e.g. because the current directory is not a git repo),   then the user should be able to specify the repo information manually.</li> <li>Allow custom sections in the output, set by <code>label</code> or a regex.</li> <li>Allow custom ordering of sections.</li> <li>Allow custom output formats (e.g. HTML, Markdown, PDF, LaTeX, etc.).</li> <li>Ability to only update changes and leave the rest of the file untouched   (allows user customization to the CHANGELOG).</li> <li>Ability to specify a custom CHANGELOG file (e.g. <code>HISTORY.md</code> or   <code>CHANGES.md</code>).</li> <li>Ability to specify a custom template layout.</li> <li>Ability to upload the CHANGELOG to a remote server.</li> <li>Allow filtering of commits based on commit message or other criteria.</li> <li>Allow customization of the commit message format in the changelog.</li> <li>Allow customization of the date format in the changelog.</li> <li>Add support for generating changelogs for specific time periods (e.g. last   week, last month, etc.)</li> <li>Add support for generating changelogs for specific contributors, authors or   teams.</li> <li>include closed issues in the changelog, linked to the PR that closed them.</li> <li>add ability to create a new release on GitHub with the latest changelog text   as the body.</li> <li>add some form of text or even block to the oldest release that says something   like \"First release\" or \"Initial release\" or \"Initial commit\" or something   (configurable) to indicate that this is the first release and nothing to   compare to. Optionally hide all PR, Issue and commit links in this release.</li> <li>add ability to place a section between releases with custom markdown, eg to   explain changes in the version numbering scheme or other important   information.</li> <li>if there are no PR for a specific release then say something to that effect   instead of just leaving the section empty. We already use the Release 'body'   for this, but if that is missing too we need to say something.</li> <li>option to change PR/Issue/Commit links to use the GitHub autolink syntax   instead of explicitly linking to the GitHub page.</li> <li>delete extra line-breaks from end of generated file.</li> <li>put the 'dependency'-tagged PR's in a collapsable list at the bottom of the   release, to avoid cluttering the changelog with a bunch of Dependabot PRs.   [<code>This would be very useful however it breaks loading the CHANGELOG directly   into MkDocs as it marks this up as a collapsable boxed section and mangles the   formatting.</code>]</li> <li>offer the ability to collapse other sections (or all sections) too. [<code>See   Above</code>]</li> <li>add a flag eg [no changelog] to PR titles to allow skipping of PRs that don't   need to be in the changelog.</li> <li>add a 'Next release' flag or similar which will create a virtual release   containing all PRs that have been merged since the last release. This will   allow the changelog to be updated before a release is made.</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>At this time there are no real options or configuration for this tool. Check the Todo List for planned features.</p> <p>Simply run the tool in the folder of a git repository and it will generate a <code>CHANGELOG.md</code> file in the current folder. You do need to specifcy the name of the repository you want to generate the changelog for using the <code>--repo</code> or <code>-r</code> option.</p> <pre><code>$ github-changelog-md --repo &lt;repo-name&gt;\n</code></pre> <p>If you do not specify a repository name, the tool will try to determine the repository name from the current folder if it is a git repository. Failing that, it will prompt you for the repository name.</p> <p>This works for any repository that is linked to your username (determined from the PAT), however if you want to generate a changelog for a repository that is not linked to your username, you can specify the repository owner using the <code>--user</code> or <code>-u</code> option.</p> <pre><code>$ github-changelog-md --user &lt;repo-owner&gt; --repo &lt;repo-name&gt;\n</code></pre> <p>As mentioned in the Installation section, you will be prompted for your GitHub PAT the first time you run the tool, and a config file will be created in the current folder if it does not already exist.</p> <p>Future plans</p> <p>At this time the tool does not have any real options or configuration, but in the future we plan to add a lot of options to customize the output.</p> <p>See the Todo List for planned features.</p>"}]}