{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Markdown Changelog Generator","text":"<p>Generate a Markdown Changelog from your Github repository.</p> <p> </p> <p>Having a changelog is a great way to keep your users informed about changes to your project. It is also a great way to keep track of what you have done and when. However, it can be a pain to maintain, especially if you have a lot of changes. This tool aims to make it easy to generate a Markdown-formatted changelog from your project's Github repository.</p> <p>Important!</p> <p>You need to use the Github <code>Pull Request</code> and <code>Release</code> methodology for this tool to work. If you don't, then this tool is not for you!</p> <p>Until you have at least one GitHub Release, this tool will lump all the PRs together under the <code>Unreleased</code> heading.</p> <p>It will detect all GitHub releases and generate a changelog based on the merged Pull Requests for each release along with a section for unreleased PRs (those merged since the last release) at the top. It will also include a list of all Issues closed for each release.</p> <p>The PRs and issues are grouped by type (bug, enhancement, etc.) and sorted by latest to oldest in this release. You can add custom sections to the list too.</p> <p>There is an option to tag all the Unreleased PRs (ie those closed after the previous release) with an upcoming release number to ease the process of creating a new release by having the changelog already up to date, or hide any unreleased PR's completely.</p> <p>There is much more this app can do, see the Usage page for full details.</p> <p>While the project is written in Python, it is NOT limited to just generating a changelog for Python projects. It will work with any Github repository and therefore any coding language. In this case a global installation is recommended. Most linux-based systems will already have Python installed, but if not, it is easy to install. Windows and the latest releases of MacOS will need Python to be installed, see the Python documentation for details.</p> <p>For an example of the output, see the Changelog for this project.</p> <p>This generator puts a small unobtrusive comment at the bottom of the changelog to indicate that it was generated by this tool. This is to acknowledge the work of the contributors and to help spread the word about this project. Please leave this comment in place for others .</p> <p>If you use this tool and like it, please consider giving it a  on Github, which helps others find it. Thanks!</p> <p>If you find this tool is useful, please consider sponsoring the developer. All sponsors will be listed on the documentation and README. All contributions are greatly appreciated and will be directly used to support and improve the project.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>This is an auto-generated log of all the changes that have been made to the project since the first release.</p> <p>This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v081-february-08-2024","title":"v0.8.1 (February 08, 2024)","text":"<p>This release is to fix security issues in some of the project dependencies.</p> <p>These are: <code>cryptography</code>, <code>jinja2</code> and <code>gitpython</code>.</p> <p>Several other dependencies have been updated to their latest versions as well.</p> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump mkdocs-material from 9.5.1 to 9.5.8 (#186) by dependabot[bot]</li> <li>Build(deps): bump cryptography from 41.0.6 to 42.0.0 (#185) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-git-revision-date-localized-plugin from 1.2.1 to 1.2.4 (#184) by dependabot[bot]</li> <li>Build(deps): bump codecov/codecov-action from 3 to 4 (#182) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-minify-plugin from 0.7.1 to 0.8.0 (#181) by dependabot[bot]</li> <li>Build(deps): bump actions/dependency-review-action from 3 to 4 (#177) by dependabot[bot]</li> <li>Build(deps): bump actions/cache from 3 to 4 (#176) by dependabot[bot]</li> <li>Build(deps-dev): bump jinja2 from 3.1.2 to 3.1.3 (#174) by dependabot[bot]</li> <li>Build(deps-dev): bump gitpython from 3.1.40 to 3.1.41 (#173) by dependabot[bot]</li> <li>Build(deps-dev): bump pre-commit from 3.5.0 to 3.6.0 (#166) by dependabot[bot]</li> <li>and 17 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#080-november-19-2023","title":"0.8.0 (November 19, 2023)","text":"<p>New Features</p> <ul> <li>Allow totally replacing the text for a specific release (<code>release_overrides</code> option) (#142) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump pyfakefs from 5.3.0 to 5.3.1 (#141) by dependabot[bot]</li> <li>Build(deps): bump pydantic from 2.5.0 to 2.5.1 (#140) by dependabot[bot]</li> <li>Build(deps): bump rich from 13.6.0 to 13.7.0 (#139) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 20.0.0 to 20.0.3 (#138) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#072-november-14-2023","title":"0.7.2 (November 14, 2023)","text":"<p>Closed Issues</p> <ul> <li>If <code>ignored_users</code> is not specified, all users are ignored which results in using the release text instead of the generated changelog (#135) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix bug where without <code>ignored_users</code> specified, all users are ignored (#136) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump pydantic from 2.4.2 to 2.5.0 (#134) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#071-november-13-2023","title":"0.7.1 (November 13, 2023)","text":"<p>Bug Fixes</p> <ul> <li>Fix spacing issues caused by extra line when deps are truncated (#133) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Refactor and clarify documentation site (#127) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump faker from 19.13.0 to 20.0.0 (#132) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.24.2 to 0.24.3 (#131) by dependabot[bot]</li> <li>Build(deps-dev): bump mypy from 1.6.1 to 1.7.0 (#130) by dependabot[bot]</li> <li>Build(deps-dev): bump pymdown-extensions from 10.3.1 to 10.4 (#129) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest-xdist from 3.3.1 to 3.4.0 (#128) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.1.4 to 0.1.5 (#126) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#070-november-08-2023","title":"0.7.0 (November 08, 2023)","text":"<p>New Features</p> <ul> <li>Add an optional text block between releases (#124) by seapagan</li> <li>Implement a <code>release_text</code> option to add arbitrary text to any release (#121) by seapagan</li> <li>Allow marking a release as 'yanked' (or removed) for some reason (#120) by seapagan</li> <li>Add <code>intro_text</code> option to display a block of text at the top of the Changelog (#118) by seapagan</li> <li>Add diff and patch links for each Release (#117) by seapagan</li> <li>Allow to only show <code>max_depends</code> number of dependency updates for each release (#116) by seapagan</li> <li>Implement the <code>ignore_users</code> setting. Users listed in this will not have any PRs or Issues in the Changelog (#115) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Hide custom text from 'unreleased' if we are also using <code>--next-release</code> (#122) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Add mypy to pre-commit and update tool versions (#119) by seapagan</li> <li>Refactor settings class, change default values (#114) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Refactor the documentation layout, splitting the long documentation section into multiple sections (#123) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump poethepoet from 0.22.1 to 0.24.2 (#113) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.4.7 to 9.4.8 (#112) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.1.3 to 0.1.4 (#111) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#060-november-04-2023","title":"0.6.0 (November 04, 2023)","text":"<p>New Features</p> <ul> <li>Make the list of ignored labels customizable (#109) by seapagan</li> <li>Implement renaming default section headers (#108) by seapagan</li> <li>Handle missing release body (#106) by seapagan</li> <li>Hide PRs or Issues by their GitHub number (#105) by seapagan</li> <li>Allow sorting PRs and Issues within each section of a release (#104) by seapagan</li> <li>Implement '--no-issues' flag to hide closed issues from the generated changelog (#102) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Don't add all settings to auto-generated config file (#103) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#051-november-02-2023","title":"0.5.1 (November 02, 2023)","text":"<p>This release is a bug-fix for release 0.5.0, which was yanked due to crashing when creating a missing config file.</p> <p>Closed Issues</p> <ul> <li>Crash with <code>TypeError</code> when new config created (#99) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix Crash with writing/reading <code>None</code> values (#100) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.12.1 to 19.13.0 (#98) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#050-november-01-2023-yanked","title":"0.5.0 (November 01, 2023) [<code>YANKED</code>]","text":"<p>This release has been removed for the following reason and should not be used:</p> <ul> <li>Crashes on missing config file, use 0.5.1 or above instead.</li> </ul> <p>New Features</p> <ul> <li>Change the default position of custom sections and allow custom position (#94) by seapagan</li> <li>Allow a custom date format (#92) by seapagan</li> <li>Implement custom sections in a release (#91) by seapagan</li> <li>Skip release(s) through CLI option or in settings (#88) by seapagan</li> <li>Implement getting settings from the config file (#87) by seapagan</li> <li>Implement quiet mode (#86) by seapagan</li> <li>Implement creating a CONTRIBUTORS file (#85) by seapagan</li> <li>Add list of ignored labels (#83) by seapagan</li> <li>Add a 'breaking changes' section (#81) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Bug: unreleased section not using date format when <code>--next-release</code> specified (#95) by seapagan</li> <li>Bug - missing GitHub PAT causes crash (#93) by seapagan</li> <li>Label matching should be case insensitive (#84) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Split requirements file into prod and dev (#82) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Fix bad wording in front page and readme (#79) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.12.0 to 19.12.1 (#90) by dependabot[bot]</li> <li>Bump pymarkdownlnt from 0.9.13.4 to 0.9.14 (#89) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.6 to 9.4.7 (#80) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#040-october-28-2023","title":"0.4.0 (October 28, 2023)","text":"<p>New Features</p> <ul> <li>Don't list any PRs with specific flag in the PR title (#74) by seapagan</li> <li>Allow a custom output file name (#72) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Use Ruff for import sorting (#77) by seapagan</li> <li>Update simple-toml-settings library to latest (#76) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Change the docs logo and favicon (#73) by seapagan</li> <li>Tweak the contributing info in docs a little (#71) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump ruff from 0.1.2 to 0.1.3 (#75) by dependabot[bot]</li> <li>Bump actions/checkout from 3 to 4 (#70) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#030-october-25-2023","title":"0.3.0 (October 25, 2023)","text":"<p>New Features</p> <ul> <li>Hide dependency PRs if requested (#68) by seapagan</li> <li>Add and implement '--unreleased' option (#60) by seapagan</li> <li>Capitalize PR and Issues (#59) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Migrate to 'ruff format' from 'black' (#65) by seapagan</li> <li>Refactor the handling of options (#64) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Docs: add more badges to docs (#67) by seapagan</li> <li>Clarify some areas in the docs and update linting options, list tasks (#66) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#023-october-24-2023","title":"0.2.3 (October 24, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Stop splitting the individual PR/Issue lines (#57) by seapagan</li> <li>Trim PR and Issue titles in changelog (#56) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Minor code refactoring (#54) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Docs: fix wrong project links in README and index (#52) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump black from 23.10.0 to 23.10.1 (#55) by dependabot[bot]</li> <li>Bump actions/checkout from 3 to 4 (#53) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#022-october-22-2023","title":"0.2.2 (October 22, 2023)","text":"<p>Bug Fixes</p> <ul> <li>Fix another bug with 'next-release' links (#50) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#021-october-22-2023","title":"0.2.1 (October 22, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Add a credit link to the end of the file (#46) by seapagan</li> <li>Set schema to version 1 (#45) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix bug in release links when 'next release' is specified (#47) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump pytest-mock from 3.11.1 to 3.12.0 (#44) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#020-october-21-2023","title":"0.2.0 (October 21, 2023)","text":"<p>First Public Release</p> <p>This is the first release of this project that was uploaded to PyPI and released as a stable version.</p> <p>This changelog was generated using github-changelog-md by Seapagan</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-github-changelog-generator","title":"Contributing to GitHub Changelog Generator","text":"<p>Thank you for your interest in contributing to <code>github-changelog-md</code>! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue. You can also check the TODO List for ideas.</p> <p>I also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a Pull Request.</p> <p>I you would like to contribute to the code, but find the requirements below a bit daunting, please feel free to open a discussion and I can help you get started, or even pair on a PR.</p> <p>Currently, development is done primary on Linux, but I will also try to test on Windows and Mac OS X when possible. If you are using a different platform and find any issues, please let me know. I welcome any contributions, on any platform!</p> <p>If you have any issues developing on a particular platform, please let me know and I will try to help you out. I am also open to suggestions for improving the development process and documentation.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager. This project requires Python 3.9 or higher.</p> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set the use their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#using-pip","title":"Using Pip","text":"<p>If you don't want to have Poetry installed globally for any reason, there is an auto-generated <code>requirements-dev.txt</code> file in the root of the project. You can use this to install the dependencies using <code>pip</code>:</p> <pre><code>$ pip install -r requirements-dev.txt\n</code></pre> <p>With this, <code>Poetry</code> is also installed as a dependency for <code>poe</code> anyway so you may as well use it ! It's a great tool and I highly recommend it. Also, it is an integral part of this project development.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>I am quite strict about linting and code formatting and have set up a number of pre-commit hooks and tasks to ensure that the code meets the required standards.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please install this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo. The GitHub CI runs the linting checks (and in future probably MyPy as well), and will fail if there are any errors.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing.</p> <p>At the moment the test framework is set up but we only have about 50% coverage. We will be adding more tests as we go along - and most definitely welcome any contributions to this area!</p> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions. Currently we are not enforcing this until we have better coverage of the code - however if you break any existing tests, the CI will fail.</p> <p>There is a task set up to run tests:</p> <pre><code>$ poe test\n</code></pre> <p>You can also run the tests manually using the following command:</p> <pre><code>$ pytest\n</code></pre> <p>The task is set up so we can automatically add other options in the future.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, using this project, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>$ poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>$ poe format\n</code></pre> <p>Lint the code using <code>ruff</code>:</p> <pre><code>$ poe ruff\n</code></pre> <p>Check the Markdown:</p> <pre><code>$ poe markdown\n</code></pre> <p>Run <code>ruff</code>, <code>mypy</code>, <code>format</code> and <code>markdown</code> at the same time:</p> <pre><code>$ poe lint\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to <code>github-changelog-md</code>:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using the Ruff   Formatter.</li> <li>Fix any linting errors or warnings. The pre-commit hooks will check for   this also. Ruff is installed and set to pretty   strict settings. Ruff now replaces all the original linters that were   installed. There is also a Markdown linter.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all existing and new tests before submitting a pull   request.</li> <li>Document your code using   docstrings. This project uses the   Google Docstring   Spec though   at this time is a bit slack on listing the Args and Returns. I will be adding   these in as I go along so feel free to add them in if you are contributing .</li> <li>If you add or change any functionality, please update the documentation   accordingly.</li> <li>Use GitHub issues to report   bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code> and <code>Ruff</code> ones are very helpful (the included <code>.vscode</code> folder helps configure these).</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"installation/","title":"Installation","text":"<p>It is possible to install this package both locally within your projects and globally so it can be used in every project. You also need to generate a GitHub Personal Access Token (PAT) to use this tool or use an existing one. This should be stored in a config file <code>.changelog-generator.toml</code> in the directory you run the tool from.</p>"},{"location":"installation/#locally-for-a-project","title":"Locally for a project","text":"<p>Change to your project directory and install the package using your preferred package manager or plain <code>pip</code>.</p> <p>I'd recommend using Poetry for managing your project dependencies if you don't already have a preference:</p> <pre><code>$ poetry add github-changelog-md --group dev\n</code></pre> <p>or, from inside a virtual environment:</p> <pre><code>$ pip install github-changelog-md\n</code></pre>"},{"location":"installation/#globally","title":"Globally","text":"<p>Install the package globally using pip:</p> <pre><code>$ pip install github-changelog-md\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user github-changelog-md\n</code></pre> <p>or use pipx (recommended)</p> <pre><code>$ pipx install github-changelog-md\n</code></pre>"},{"location":"installation/#setup-a-github-pat","title":"Setup a GitHub PAT","text":"<p>Since this tool uses the GitHub API, you will need to create a Personal Access Token (PAT) to use this tool without being rate limited. You can create a PAT with the <code>repo</code> scope to access private repositories, or just leave all the scopes unchecked to only access public repositories. Generate a 'classic' token unless you need more fine-grained control over the permissions.</p> <p>Choose a descriptive name for your token, such as <code>github-changelog-md</code>, an expiry time (or choose to not have it expire at all) and copy the token to your clipboard.</p>"},{"location":"installation/#pat-permissions","title":"PAT Permissions","text":"<p>At this time the tool does not require any special permissions, but in the future we plan to offer the ability to create an actual release from the command line. To do this, the PAT will need either the <code>public_repo</code> scope (you only plan to use this on public repositories) or the <code>repo</code> scope (you also plan to use this on private repositories).</p>"},{"location":"installation/#create-a-config-file","title":"Create a config file","text":"<p>Dont commit the config file to your project repository!</p> <p>The config file contains your GitHub PAT, so you should not commit it to your repository. It is critical that you add it to your <code>.gitignore</code> file when you are using this tool in a project.</p> <p>If this does end up in a repository, GitHub will automatically revoke the PAT and you will need to create a new one anyway, but there is a small chance someone could use it to access your repositories.</p> <p>This tool will look for a config file <code>.changelog-generator.toml</code> in the location it is run from. The config file is a simple TOML file with the following format:</p> <pre><code>[changelog_generator]\nschema_version = 1\ngithub_pat = \"your_github_pat\"\n</code></pre> <p>The easiest way to create this is run the app, you will be prompted for the PAT and the config file will be created for you in the current folder then the app will continue.</p> <pre><code>$ github-changelog-md\n</code></pre> <p>Note</p> <p>Future versions of this tool may require a newer schema version, so it is recommended to always use the latest version. At this time, the schema version is not used for anything.</p> <p>It is also planned to have a global config file in the user's home folder, with the settings from the local config file being merged with the global config file. This will allow you to set the PAT once and use it for all projects.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"todo/","title":"Todo List","text":""},{"location":"todo/#planned-features","title":"Planned features","text":"<p>Not all of these features/ideas will (or should!) be implemented but this is an idea of where I want to take the project in the future.</p> <p>Items marked with:</p> <ul> <li> Should be implemented as a priority before the next minor release (patch or bug-fixes are ok as needed).</li> <li> Have been already implemented in the main repo and will be included in the next release.</li> </ul>"},{"location":"todo/#features-to-add","title":"Features to Add","text":"<ul> <li>Allowing some sort of merging of releases, e.g. all beta releases PR are listed   with the latest 'un merged' release. or, more simply, a list of releases to   ignore so that their PR's are added to the next release up's notes.</li> <li>Allow the <code>extend_sections</code> option to use a regex on the PR title in addition   to just matching on the label.</li> <li>Allow custom ordering of sections.</li> <li>Allow custom output formats (e.g. HTML, Markdown, PDF, etc.).</li> <li>Add ability to create a new draft release on GitHub with the latest   changelog text as the body.</li> <li>For the <code>--contrib</code> option, allow to use an existing file with comment markers   in the file to indicate where to add the names. Provide a default file with   the comment markers in it or just document the process?</li> <li>If there is no local config file, check for a global config file in the   user's home directory. This would allow a user to set their GitHub PAT once   and use it for all projects. [<code>Probably needs to be done in the settings   package</code>]</li> <li>Add settings to run this as a GitHub action, so it can be run automatically   when a new release is created or a PR is merged. We should be able to use the   <code>secrets.GITHUB_TOKEN</code> for this?</li> <li>Option to start at a specific release, ignoring all previous releases.</li> <li>Once the common config file functionality is implemented, add the ability to   read the config from a <code>pyproject.toml</code> file if it exists in the current   directory. This will allow one less config file. Note that the PAT will still   need to be set manually in the local or global config file.</li> <li>Add option to specify the GitHub PAT from the command line, eg <code>--token   &lt;PAT&gt;</code>. This will override any PAT set in the config file. Note that this   can be a security risk if the PAT is visible in the command history, so it   should be used with caution. [<code>This needs the settings logic to be   refactored first, the way it is done at the moment it will still ask for the   PAT if it is not set in the config file, even if it is set on the command   line, since this is a side-effect of importing the settings library.</code>]</li> <li>Offer to create any missing GitHub labels for the repo. This will prob require   adding extra permissions to the PAT.</li> <li>Allow to use <code>Git TAGS</code> instead of <code>GitHub Releases</code> to generate the   changelog. some projects don't use GitHub releases, but do use tags.</li> </ul>"},{"location":"todo/#improve-existing-functionality","title":"Improve existing functionality","text":"<ul> <li>Allow multiple labels to be used for the same section, eg 'enhancement'   and 'new_feature' both map to the 'Enhancements' section.</li> <li>Perhaps rename the <code>Enhancements</code> section to <code>New Features</code> or similar? I do   this in my own projects anyway.</li> <li>If the tool is run in a local repo, use that for the <code>--contrib</code> functionality   instead of the GitHub API. This should be an order of magnitude faster. Have   an opt-out option to use the GitHub API instead.</li> <li>Update the format for custom sections to allow each section to have it's own   insertion index. This will be a breaking change in the config file format so   require a <code>schema_version</code> bump. [<code>This will not be needed if the option for   custom ordering of sections is implemented, it can be folded into that.</code>]</li> </ul>"},{"location":"todo/#known-issues","title":"Known Issues","text":"<ul> <li>If using the <code>--next-release</code> option, while also having a <code>release_text</code> set for   that virtual release, the <code>release_text</code> will not be shown for the virtual   release.</li> <li>Some version numbers in PRs (especially dependabot) get mis-identified as   emojis in the output, especially if the version number contains <code>&lt;3</code> which   gives  in certain viewers (though this does NOT happen in GitHub or   MkDocs at least). This is very obvious for 'pip' version numbers. It's not a   priority to fix this for it's intended usage, but just for completeness.</li> <li>The table styling under mobile looks a bit squashed due to setting the width   to 100% for better desktop display. Need to add a media query to set the width   better for mobile, prob using overflow</li> <li>When using the Release body, we need to normalize any headings to Bold text   instead so it does not grate so badly with the auto-generated headings.</li> <li>In some cases the <code>full-changelog</code> does not get removed from the existing body   properly depending on how it is formatted.</li> <li>extra linebreaks are added after inserted text blocks</li> </ul>"},{"location":"todo/#refactoring","title":"Refactoring","text":"<ul> <li>The whole code base needs a bit of refactoring to tidy the code and remove some of the duplication. This is a low priority but should be done at some point. Priority to the actual 'ChangeLog' class. Preferably this should wait until we have full test coverage.</li> <li><code>Pydantic</code> is listed as a dependency but is not actually used. This is a   leftover from when I was using it for the config file. It should be removed -   or look at using it for validation.</li> </ul>"},{"location":"todo/#documentation","title":"Documentation","text":"<ul> <li>None</li> </ul>"},{"location":"todo/#testing","title":"Testing","text":"<ul> <li>Complete testing with <code>pytest</code> to 100% or as close as possible.</li> <li>The whole <code>test_changelog.py</code> file needs to be re-written and find a better   way to deal with missing options.</li> </ul>"},{"location":"todo/#back-burner","title":"Back Burner","text":"<p>These are ideas that I have had but are not really a priority at the moment, were partially deprecated by other functionality, or I'm not sure if they are even a good idea.</p> <p>Moving them here to prune the main list down to things that are more likely to be implemented.</p> <ul> <li>Ability to only update changes and leave the rest of the file untouched (ie do   not re-generate previous releases, only new ones or the unreleased section).   (allows user customization to the CHANGELOG). [<code>Since adding the ability to   include arbitrary text, hide releases and PRs, this is probably not worth the   effort it would take</code>]</li> <li>Add support for generating changelogs for specific time periods (e.g. last   week, last month, etc.) [<code>More like something would be in a repo analysis   tool not a changelog generator</code>]</li> <li>Add support for generating changelogs for specific contributors, authors or   teams. [<code>As above</code>]</li> <li>option to just have a flat list of PRs and Issues with no sections. [<code>Would   be ugly and limited usefulness</code>]</li> <li>Add some form of text block to the oldest release that says something like   \"First release\" or \"Initial release\" or \"Initial commit\" or something   (configurable) to indicate that this is the first release and nothing to   compare to. Optionally hide all PR, Issue and commit links in this release.   [<code>Easily done using the 'release_overrides' option.</code>]</li> <li>Set up versioned documentation on GitHub pages using 'mike' in conjunction with   MkDocs. I'd like to have an 'unreleased' branch to show ongoing docs for the   upcoming versions if possible. See the   mkdocs-material versioning   page on this subject. [<code>Honestly, I can't be bothered with this. I don't see   the point of versioned docs for a tool like this. Just use the latest version   and docs</code>]</li> <li>Dump markdown code for a specific release to the terminal, so it can be copy /   pasted into other docs.</li> </ul>"},{"location":"todo/#other","title":"Other","text":"<ul> <li>Break out the <code>--contrib</code> option into a separate standalone project that can   be used to generate a list of contributors for any project directly from a   local repository. This will be useful for projects that don't use GitHub. Can   be made into a GitHub action too.</li> <li>Offer standalone binaries for Windows, MacOS and Linux. This will allow users   to install the tool without having to install Python first. This will be   especially useful for Windows users. This will require using <code>pyinstaller</code> or   similar to create the binaries. Can probably be done with GitHub actions.</li> </ul>"},{"location":"usage/basic/","title":"Using the Changelog Generator","text":"<p>This tool is designed to be run from the root of a project, and will generate a <code>CHANGELOG.md</code> file in the current folder using the GitHub Release and PR history. It can also create a <code>CONTRIBUTORS.md</code> file if you want it to.</p> <p>Note that this tool is designed to be run after you have merged your PRs, and just before you create a new release. It will use the GitHub release tags to determine each release.</p> <p>Get the most out of this tool</p> <p>Since it also lists unreleased PRs, you can run it at any time and push the <code>CHANGELOG.md</code> file up to GitHub, to give users an idea of what is coming in the next release.</p> <p>The generated CHANGELOG uses the Pull Request or Issue Title for each item, it is recommended that you use clear and descriptive titles for your PRs. This will make the changelog much more useful and readable. It is always possible to edit the titles of your PRs after they have been merged, so if you have a PR with a vague title, you can edit it to be more descriptive before you run the tool.</p>"},{"location":"usage/basic/#basic-usage","title":"Basic Usage","text":"<p>This tool is designed to produce a usable clean <code>CHANGELOG.md</code> without any extra configuration. Simply run the tool in the folder of a git repository and it will generate a <code>CHANGELOG.md</code> file in the current folder. You can specify the name of the repository you want to generate the changelog for using the <code>--repo</code> or <code>-r</code> option:</p> <pre><code>$ github-changelog-md --repo &lt;repo-name&gt;\n</code></pre> <p>Automatic repository name detection</p> <p>If you do not specify a repository name, the tool will try to determine the repository name from the current folder if it is a git repository. Failing that it will exit.</p> <p>Just run the command from the root of the repository you want to generate the changelog for, with no options:</p> <pre><code>$ github-changelog-md\n</code></pre> <p>This works for any repository that is linked to your username (determined from the PAT), however if you want to generate a changelog for a repository that is not linked to your username, you can specify the repository owner using the <code>--user</code> or <code>-u</code> option.</p> <pre><code>$ github-changelog-md --user &lt;repo-owner&gt; --repo &lt;repo-name&gt;\n</code></pre> <p>As mentioned in the Installation section, you will be prompted for your GitHub PAT the first time you run the tool, and a config file will be created in the current folder if it does not already exist.</p>"},{"location":"usage/basic/#advanced-usage","title":"Advanced Usage","text":"<p>There are many options available to customize the output of the tool (both on the command-line and through a configuration file), see the following sections for full details.</p>"},{"location":"usage/cli_options/","title":"Command Line Options","text":"<p>Many (though not all) of the options that can be set in the config file can also be set on the command line. This allows you to override the config file settings on a per-run basis.</p>"},{"location":"usage/cli_options/#-output-o","title":"<code>--output</code> / <code>-o</code>","text":"<p>By default the tool will create a <code>CHANGELOG.md</code> file in the current folder. You can specify a different filename using the <code>--output</code> or <code>-o</code> option.</p> <pre><code>$ github-changelog-md --output HISTORY.md\n</code></pre> <p> Equivalent to the <code>output_file</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-next-release-n","title":"<code>--next-release</code> / <code>-n</code>","text":"<p>This option allows you to specify the name of the next release. By default, any PRs that are merged after the last existing release will be added to the <code>Unreleased</code> section of the changelog. If you specify a value for this option, the tool will create a new section with the specified name and add the PRs to that section instead.</p> <p>Useful to prep for a release before it is actually released.</p> <pre><code>$ github-changelog-md --next-release 1.2.3\n</code></pre> <p> There is no equivalent setting in the config file.</p>"},{"location":"usage/cli_options/#-unreleased-no-unreleased","title":"<code>--unreleased</code> / <code>--no-unreleased</code>","text":"<p>Choose whether to include the <code>Unreleased</code> section in the changelog. By default the <code>Unreleased</code> section is included (<code>--unreleased</code>), but you can use the <code>--no-unreleased</code> option to exclude it</p> <p> Equivalent to the <code>unreleased</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-depends-no-depends","title":"<code>--depends</code> / <code>--no-depends</code>","text":"<p>Choose whether to include the <code>Dependency Updates</code> section in the changelog. By default this will be shown (<code>--depends</code>), but you can use the <code>--no-depends</code> to hide them. Some releases have a lot of dependency updates, so this can be useful to keep the changelog more readable.</p> <p> Equivalent to the <code>depends</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-issues-no-issues","title":"<code>--issues</code> / <code>--no-issues</code>","text":"<p>Hide the <code>Closed Issues</code> section. By default this section is shown, but you can use the <code>--no-issues</code> option to hide it.</p> <p> Equivalent to the <code>show_issues</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-contrib-no-contrib","title":"<code>--contrib</code> / <code>--no-contrib</code>","text":"<p>Choose whether to create the <code>CONTRIBUTORS.md</code> file. By default this will be <code>False</code> (<code>--no-contrib</code>), but you can use the <code>--contrib</code> option to enable it.</p> <p>Possibly LONG operation</p> <p>This can take a while to run, as it has to query the GitHub API for each contributor. If you have a lot of contributors or many PR's, it can take a few minutes to complete.</p> <p>In this case it is recommended to only run this option when you are ready to release a new version, and not every time you run the tool.</p> <p>In future versions I will add the ability to cache the contributors list, which should speed things up a lot</p> <p> Equivalent to the <code>contrib</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-quiet-q","title":"<code>--quiet</code> / <code>-q</code>","text":"<p>By default the tool will output some information about what it is doing, and some stats about the PRs and Issues it has found. You can use the <code>--quiet</code> or <code>-q</code> option to suppress this output.</p> <p> Equivalent to the <code>quiet</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-skip-s","title":"<code>--skip</code> / <code>-s</code>","text":"<p>This option allows you to skip a release. You can specify this option multiple times to skip multiple releases. This is useful if you have a release that you do not want to include in the changelog for some reason.</p> <pre><code>$ github-changelog-md --skip 1.2.3 --skip 1.3-beta1\n</code></pre> <p>The string specified here is the actual release <code>tag</code> for that release, not the release <code>name</code>.</p>"},{"location":"usage/cli_options/#-ignore-e","title":"<code>--ignore</code> / <code>-e</code>","text":"<p>Ignore a PR or Issue. You can specify this option multiple times to ignore multiple PRs or Issues. This is useful if you have a PR or Issue that you do not want to include in the changelog for some reason.</p> <p>The integer specified here is the actual PR or Issue <code>number</code> on GitHub.</p> <pre><code>$ github-changelog-md --ignore 123 --ignore 456\n</code></pre> <p>Tip</p> <p>You can also add <code>[no changelog]</code> anywhere in the PR title, and it will be excluded from the changelog. This is case-insensitive, so <code>[No Changelog]</code> or <code>[NO CHANGELOG]</code> will also work.</p> <p> Equivalent to the <code>ignore_items</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-item-order-i","title":"<code>--item-order</code> / <code>-i</code>","text":"<p>This option allows you to specify the order of the PRs and Issues in each section. By default the order is <code>newest_first</code>, but you can use the <code>--item-order</code> or <code>-i</code> option to change this to <code>oldest_first</code>.</p> <p> Equivalent to the <code>item_order</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-max-depends-m","title":"<code>--max-depends</code> / <code>-m</code>","text":"<p>This option allows you to specify the maximum number of dependency updates to show for each release. By default this is set to <code>10</code>, but you can use the <code>--max-depends</code> or <code>-m</code> option to change this.</p> <p>If you use Dependabot to handle your dependency updates, this setting can be useful to limit the noise in the changelog.</p> <p> Equivalent to the <code>max_depends</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-show-diff-no-show-diff","title":"<code>--show-diff</code> / <code>--no-show-diff</code>","text":"<p>Choose whether to show the diff links for each release. By default this will be shown (<code>--show-diff</code>), but you can use the <code>--no-show-diff</code> option to hide them.</p> <p> Equivalent to the <code>show_diff</code> setting in the config file.</p>"},{"location":"usage/cli_options/#-show-patch-no-show-patch","title":"<code>--show-patch</code> / <code>--no-show-patch</code>","text":"<p>Choose whether to show the patch links for each release. By default this will be shown (<code>--show-patch</code>), but you can use the <code>--no-show-patch</code> option to hide them.</p> <p> Equivalent to the <code>show_patch</code> setting in the config file.`</p>"},{"location":"usage/config_file/","title":"Configuration File","text":"<p>As mentioned in the Installation section, this tool uses a configuration file to store your GitHub PAT and other settings. This file is created in the current folder the first time you run the tool, and is named <code>.changelog-generator.toml</code>. The only required setting is the <code>github_pat</code> setting. The other settings are optional, and can be set on the command line (see the next section) instead of in the config file. Any settings in the config file will be overridden by the command line options.</p> <p>The config file is in TOML format, and can be edited manually. All settings are under the <code>[changelog_generator]</code> section, and any other sections will be ignored.</p> <p>Add to .gitignore</p> <p>As already mentioned, the config file contains your GitHub PAT, so you should NOT commit this file to your repository. Add it to your <code>.gitignore</code> file to prevent it being committed.</p>"},{"location":"usage/config_file/#options","title":"Options","text":"<p>Current available options are:</p> Setting Description Default <code>github_pat</code> Your GitHub PAT <code>output_file</code> Output filename CHANGELOG.md <code>unreleased</code> Include unreleased section <code>True</code> <code>depends</code> Include dependency updates section <code>True</code> <code>contrib</code> Create CONTRIBUTORS.md file <code>False</code> <code>quiet</code> Suppress output <code>False</code> <code>skip_releases</code> List of releases to skip <code>[]</code> <code>show_issues</code> Show closed issues <code>True</code> <code>extend_sections</code> A list of custom sections <code>[]</code> <code>extend_sections_index</code> Index to insert custom sections dynamic <sup>1</sup> <code>rename_sections</code> Rename default section headers <code>[]</code> <code>date_format</code> Date format for release dates <code>%Y-%m-%d</code> <code>item_order</code> Order of PR/Issues in each section <code>newest_first</code> <code>ignore_items</code> List of PRs/Issues to ignore <code>[]</code> <code>ignored_labels</code> List of labels to ignore See above <code>extend_ignored</code> List of labels to add to ignored <code>[]</code> <code>allowed_labels</code> List of labels to allow <code>[]</code> <code>ignored_users</code> List of usernames to ignore <code>[]</code> <code>max_depends</code> Max dependency updates per Release <code>10</code> <code>show_diff</code> Show diff links for each Release <code>True</code> <code>show_patch</code> Show patch links for each Release <code>True</code> <code>intro_text</code> Introductory paragraph <code>\"\"</code> <code>release_text</code> Add text to a release <code>[]</code> <code>release_text_before</code> Add text before a release <code>[]</code> <code>release_overrides</code> Replace all text for a release <code>[]</code> <code>yanked</code> Mark a release as Yanked <code>[]</code> <code>schema_version</code> Configuration schema version <code>1</code> <p>Config file schema version</p> <p>The <code>schema_version</code> setting is used to determine if the config file needs to be updated. If you have an older version of the config file, it may have some settings that are renamed or no longer used. If this is the case, the tool will mention this and point to the documentation so you can update your config file.</p> <p>You should never change this setting manually unless you are updating the config file to an official newer version.</p>"},{"location":"usage/config_file/#example-configuration-file","title":"Example Configuration File","text":"<p>This is a faked up example of a config file with many of the settings.</p> changelog_generator.toml<pre><code>github_pat = \"1234567890\" # (1)!\nschema_version = \"1\"\nunreleased = true\nquiet = false\ndepends = true\ncontrib = false\nskip_releases = [\"1.2.3\", \"1.2.4\"]\nextend_sections = [\n  { title = \"Testing\", label = \"testing\" },\n  { title = \"Security\", label = \"security\" },\n]\nextend_sections_index = 3\nrename_sections = [{ old = \"Enhancements\", new = \"New Features\" }]\ndate_format = \"%d %B %Y\" # (2)!\nitem_order = \"oldest_first\"\nignore_items = [123, 456] # (3)!\nextend_ignored = [\"testing\"]\nallowed_labels = [\"question\"]\nignored_users = [\"pre-commit-ci[bot]\"]\nmax_depends = 15\nshow_patch = false\nintro_text = \"\"\"\nThis is a log of all the changes that have been made to the project since the\nfirst release. It is automatically generated for each release.\n\"\"\"\nyanked = [\n  { release = \"1.3.0\", reason = \"Ooooh, nasty nasty bug - use 1.3.1 instead!!!\" }\n]\n\n[[changelog_generator.release_text]]\nrelease = \"1.4.0\"\ntext = \"This is a paragraph for the 1.4.0 release.\"\n\n[[changelog_generator.release_text]]\nrelease = \"unreleased\"\ntext = \"\"\"\nThese are the changes that have been made to the main repository since the last\nrelease.\n\"\"\"\n\n[[changelog_generator.release_overrides]]\nrelease = \"1.3.5\"\ntext = \"\"\"\n**Replacement Text**\n\nThis is **replacement text** for the release notes of version 1.3.5.\n\nNo autogenerated text will be included in the release notes for this version.\n\"\"\"\n</code></pre> <ol> <li> This is the only required setting, the others are optional.</li> <li> This setting uses the <code>strftime</code> format, see    Advanced Usage for more details.</li> <li> You can also add <code>[no changelog]</code> anywhere in the PR or Issue title,    and it will be excluded from the changelog. This is case-insensitive, so <code>[No    Changelog]</code> or <code>[NO CHANGELOG]</code> will also work.</li> </ol> <p>As mentioned above, the only required setting is the <code>github_pat</code> setting. The other settings can be left out, and the tool will use the default values (or the values specified on the command line).</p>"},{"location":"usage/config_file/#real-world-example","title":"Real-world Example","text":"<p>The below is the exact configuration file used to create the changelog for this project. It is a good example of how you can customize the changelog to suit your needs.</p> changelog_generator.toml<pre><code>[changelog_generator]\ngithub_pat = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nschema_version = '1'\nextend_sections = [\n  { title = \"Testing\", label = \"testing\" },\n  { title = \"Security\", label = \"security\" },\n]\nextend_sections_index = 3\ndate_format = \"%B %d, %Y\"\nrename_sections = [{ old = \"Enhancements\", new = \"New Features\" }]\nignored_users = [\"pre-commit-ci[bot]\"]\nintro_text = \"\"\"\nThis is an auto-generated log of all the changes that have been made to the\nproject since the first release.\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\"\"\"\n[[changelog_generator.yanked]]\nrelease = \"0.5.0\"\nreason = \"Crashes on missing config file, use 0.5.1 or above instead.\"\n\n[[changelog_generator.release_text]]\nrelease = \"0.5.1\"\ntext = \"\"\"\nThis release is a bug-fix for release 0.5.0, which was yanked due to crashing\nwhen creating a missing config file.\n\"\"\"\n\n[[changelog_generator.release_text]]\nrelease = \"unreleased\"\ntext = \"\"\"\nThese are the changes that have been merged to the repository since the last\nrelease. If you want to try out these changes, you can install the latest\nversion from the main branch by running:\n\n```console\n$ pip install git+https://github.com/seapagan/github-changelog-md\n```\n\nor, if using poetry:\n\n```console\n$ poetry add git+https://github.com/seapagan/github-changelog-md\n```\nEverything in this section will be included in the next official release.\n\"\"\"\n\n[[changelog_generator.release_overrides]]\nrelease = \"0.2.0\"\ntext = \"\"\"\n**First Public Release**\n\nThis is the first release of this project that was uploaded to\n[PyPI](https://pypi.org/) and released as a stable version.\n\"\"\"\n</code></pre> <ol> <li> <p>The default setting is to insert your custom sections just before the <code>Dependency Updates</code> section, but you can change this by setting the <code>extend_sections_index</code> value. See the Custom Sections section for more details.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage/options/","title":"Advanced Usage","text":"<p>There are a number of options available to customize the output of the tool, to ignore certain releases or PRs, to add custom text, etc. These options are described below. For using these from the command line or config file, see the respective sections.</p> <p>Tip</p> <p>Read this Advanced Section through to the end to learn how to configure the tool to your exact needs. There are a lot of options, but the defaults should be a usable starting point to work from.</p>"},{"location":"usage/options/#release-section-headers","title":"Release Section Headers","text":"<p>There are a several section headers defined by default, which are used to group the PRs in the changelog for each release. These are taken from the GitHub <code>labels</code> applied to the PR. The default section headers are:</p> Title Label Notes Breaking Changes breaking Merged Pull Requests Any PR with NO labels Enhancements enhancement Bug Fixes bug Refactoring refactor Documentation documentation Dependency Updates dependencies <p>You can tag each of your PRs with any of these labels to group them in the changelog - If you are using <code>Dependabot</code>, by default it will add the <code>dependencies</code> label.</p> <p>Warning</p> <p>For the moment, limit your PRs to a single label, as otherwise the tool will include the PR in each section it finds a label for. This will be improved in future versions. I also plan to add the ability to use multiple labels for the same section, eg <code>enhancement</code> and <code>enhancements</code></p> <p>Labels are case-insensitive, so <code>bug</code> or <code>BUG</code> will both match \"Bug Fixes\". The above order is also the order that the sections will appear in the changelog, again this order will be customizable in future versions.</p> <p>Custom GitHub Labels</p> <p>GitHub provides a few default labels, but you can also create your own custom labels and then add them to the <code>extend_sections</code> option in the config file. See Custom Sections for more details.</p> <p>For example, the <code>breaking</code> and <code>refactor</code> labels are not default GitHub labels, but are ones I add to all my projects personally.</p>"},{"location":"usage/options/#custom-sections","title":"Custom Sections","text":"<p>You can also add your own custom section headers, by adding a <code>label</code> to your PRs that matches the <code>label</code> you specify in the config file. For example, if you add the following to your config file:</p> <pre><code>extend_sections = [\n  { title = \"Automatic Testing\", label = \"testing\" },\n  { title = \"Security\", label = \"security\" },\n]\n</code></pre> <p>Now, any PRs that have the <code>testing</code> label will be added to a section called <code>Automatic Testing</code>, and <code>security</code> labels will be in <code>Security</code>. By default these are inserted just before the <code>Dependency Updates</code> section, but you can specify the <code>extend_sections_index</code> value in the config file to change the index at which they they are inserted.</p> <p>Be Aware of the Index!</p> <p>The value of <code>extend_sections_index</code> is the index of the section, not the position. The first section has an index of <code>0</code>, the second has an index of <code>1</code>, etc. So if you want your custom sections to appear after the <code>Enhancements</code> section, you would set the <code>extend_sections_index</code> to <code>3</code> (the index of the next section, <code>Bug Fixes</code>)</p> <p>HOWEVER this index is the index of the default sections (listed above) that you want to insert BEFORE, even if those sections are not displayed. So an index of 0 to 2 could still be before the <code>Enhancements</code> section, if the <code>Breaking Changes</code> or <code>Merged Pull Requests</code> sections are not displayed. Play with the value to get the desired result .</p> <p>Finally, the <code>Closed Issues</code> section is separate and always displayed first regardless of the <code>extend_sections_index</code> value.</p> <p>Verbose TOML Arrays</p> <p>The format for this option is an array of tables, with each table containing a <code>title</code> and a <code>label</code>. The above example uses an <code>inline TOML array of tables</code> but the more verbose format will also work:</p> <pre><code>[[changelog_generator.extend_sections]]\ntitle = \"Automatic Testing\"\nlabel = \"testing\"\n\n[[changelog_generator.extend_sections]]\ntitle = \"Security\"\nlabel = \"security\"\n</code></pre> <p>Verbose arrays like this must come at the end of the config file, after all the normal settings!. Inline arrays can be with the other settings.</p> <p>Note the double square brackets and the inclusion of the <code>changelog_generator</code> prefix! Inline arrays as in the first example are just a bit easier to read and IMHO look nicer.</p>"},{"location":"usage/options/#renaming-default-sections","title":"Renaming Default Sections","text":"<p>You can also rename the default section headers using the <code>rename_sections</code> option in the config file. For example, if you want to rename the <code>Enhancements</code> section to <code>New Features</code>, you would add the following to your config file:</p> <pre><code>rename_sections = [{ old = \"Enhancements\", new = \"New Features\" }]\n</code></pre> <p>You specify the original title of the section you want to rename as <code>old</code> (case sensitive!), and the new title as <code>new</code>. You can rename as many sections as you want, just add more tables to the array.</p> <p>The same notes apply to this option as to the <code>extend_sections</code> option above, you can use the inline array format or the verbose format as you prefer.</p>"},{"location":"usage/options/#custom-date-format","title":"Custom Date Format","text":"<p>The <code>date_format</code> setting allows you to specify a custom date format for the release dates. The default is \"<code>%Y-%m-%d</code>\" (<code>Year-month-day</code>) which will give you dates like <code>2023-10-01</code>. You can use any of the normal Python strftime options to customize the date format. This is a full timestamp, so you can include the time as well if you want (though that is probably a bit overkill for a changelog).</p> <p>I quite like \"<code>%B %d, %Y</code>\" (<code>month day, year</code>) which will give you dates like <code>November 01, 2023</code>.</p> <p>There is no CLI option for this setting, so you will need to edit the config file manually if you want to change it.</p>"},{"location":"usage/options/#ignored-labels","title":"Ignored Labels","text":"<p>There are a few labels that are ignored by default and will not be included in the changelog. These are:</p> <ul> <li><code>duplicate</code></li> <li><code>invalid</code></li> <li><code>question</code></li> <li><code>wontfix</code></li> </ul> <p>These are ignored for both PRs and Issues.</p>"},{"location":"usage/options/#customizing-ignored-labels","title":"Customizing Ignored Labels","text":"<p>There are three ways to customize the ignored labels, all using settings in the config file. There are no equivalent command-line options for these settings.</p>"},{"location":"usage/options/#ignored_labels","title":"<code>ignored_labels</code>","text":"<p>The <code>ignored_labels</code> setting is a definitive list of labels that should be ignored. This totally replaces the default list. For example, if you only want to ignore the <code>wontfix</code> label, but include every other label, you would add the following to your config file:</p> <pre><code>ignored_labels = [\"wontfix\"]\n</code></pre> <p> If this setting is present in your config file, the <code>extend_ignored</code> and <code>allowed_labels</code> settings will be silently ignored.</p>"},{"location":"usage/options/#extend_ignored","title":"<code>extend_ignored</code>","text":"<p>The <code>extend_ignored</code> setting is a list of labels to add to the default list. For example, if you don't want to list documentation changes in the changelog, you could add the following to your config file:</p> <pre><code>extend_ignored = [\"documentation\"]\n</code></pre> <p> This setting is ignored if you also have the <code>ignored_labels</code> setting in your config file.</p>"},{"location":"usage/options/#allowed_labels","title":"<code>allowed_labels</code>","text":"<p>Finally, the <code>allowed_labels</code> setting is a list of labels that should be included, even if they are in the default list. For example, if you want to include the <code>question</code> label in the changelog, you could add the following to your config file:</p> <pre><code>allowed_labels = [\"question\"]\n</code></pre> <p> This setting is ignored if you also have the <code>ignored_labels</code> setting in your config file.</p> <p>Tip</p> <p>You CAN combine the <code>extend_ignored</code> and <code>allowed_labels</code> settings if needed , but it is probably easier to just use the <code>ignored_labels</code> setting instead.</p>"},{"location":"usage/options/#ignoring-specific-users","title":"Ignoring Specific Users","text":"<p>You can also ignore PRs and Issues from specific users, using the <code>ignored_users</code> setting in the config file. For example, if you want to ignore PRs and Issues from the <code>pre-commit-ci[bot]</code> user, you could add the following to your config file:</p> <pre><code>ignored_users = [\"pre-commit-ci[bot]\"]\n</code></pre> <p>This is a list of strings and is optional. If you do not specify this setting, all users will be included. This is NO command-line equivalent for this setting.</p>"},{"location":"usage/options/#adding-arbitrary-text","title":"Adding Arbitrary Text","text":"<p>It is possible to add arbitrary text to the changelog, either at the top of the changelog, between releases, or to a specific release.</p>"},{"location":"usage/options/#add-an-introductory-paragraph","title":"Add an introductory paragraph","text":"<p>You can add an introductory paragraph to the top of the changelog, using the <code>intro_text</code> setting in the config file. For example, if you want to add a paragraph to the top of the changelog, you could add the following to your config file:</p> <pre><code>intro_text = \"\"\"\nThis is an auto-generated log of all the changes that have been made to the\nproject since the first release.\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\"\"\"\n</code></pre> <p>As seen above, you can use triple quotes to add a multi-line paragraph. If you only have one line of text, use normal quotes:</p> <pre><code>intro_text = \"This is the project Changelog.\"\n</code></pre> <p>Tip</p> <p>This text is Markdown formatted, so you can use any Markdown formatting you want. Remember that a single return in Markdown is ignored, so if you want a blank line between paragraphs, you need to add two returns.</p> <p>The default value for this setting is an empty string, so if you do not specify this setting, no introductory paragraph will be added.</p>"},{"location":"usage/options/#add-text-to-a-specific-release","title":"Add text to a specific release","text":"<p>You can add text to a specific release, using the <code>release_text</code> setting in the config file. For example, if you want to add a paragraph to the <code>1.2.3</code> release, you could add the following to your config file:</p> <pre><code>release_text = [\n  { release = \"1.2.3\", text = \"This is a paragraph for the 1.2.3 release.\" }\n]\n</code></pre> <p>Generally you would add more than one line of text, so you can use triple quotes and the verbose format:</p> <pre><code>[[changelog_generator.release_text]]\nrelease = \"1.2.3\"\ntext = \"\"\"\nThis is a longer paragraph for the 1.2.3 release. It can contain multiple lines\nof text, and can use **Markdown formatting**.\n\"\"\"\n</code></pre> <p>Using the special release tag \"unreleased\" you can add text to the top of the 'Unreleased' section too:</p> <pre><code>[[changelog_generator.release_text]]\nrelease = \"unreleased\"\ntext = \"\"\"\nThese are the changes that have been made to the main repository since the last\nrelease. You can try out these by cloning the repository and installing locally.\nEverything in this section will be included in the next release.\n\"\"\"\n</code></pre> <p>Tip</p> <p>In both cases, this text is Markdown formatted, so you can use any Markdown formatting you want. Remember that a single return in Markdown is ignored, so if you want a blank line between paragraphs, you need to add two returns.</p> <p>There is NO command-line equivalent for this setting.</p> <p>Below is an example of how this looks in the changelog for this project:</p> <p></p>"},{"location":"usage/options/#adding-text-between-releases","title":"Adding text between releases","text":"<p>You can add a text section between releases, using the <code>releases_text_before</code> setting in the config file. For example, if you want to add a paragraph between the <code>1.2.3</code> and <code>1.2.4</code> releases, you could add the following to your config file:</p> <pre><code>[[github_changelog.md.release_text_before]]\nrelease = \"1.2.4\"\ntext = \"This is a paragraph between the 1.2.3 and 1.2.4 releases.\"\n</code></pre> <p>The <code>release</code> value is the release that the text will be added before, working from top to bottom in the changelog. So in the above example, the text will be between the <code>1.2.4</code> and <code>1.2.5</code> releases.</p> <p>You can either use the inline or verbose format for this setting, depending on how much text you want to add. There is NO command-line equivalent for this setting.</p>"},{"location":"usage/options/#completely-replace-a-release-text","title":"Completely replace a Release Text","text":"<p>You can completely replace a release with your own text, using the <code>release_overrides</code> setting in the config file. For example, if you want to replace the <code>1.2.3</code> release with your own text, you could add the following to your config file:</p> <pre><code>release_overrides = [\n  { release = \"1.2.3\", text = \"This is replacement text for the 1.2.3 release.\" }\n]\n</code></pre> <p>In this case, the <code>release</code> value is the release that will be replaced with your text. The <code>text</code> value is the text that will replace the release notes for that release. This text is standard Markdown formatted. There is NO command-line equivalent for this setting.</p> <p>Tip</p> <p>This completely replaces the release notes for that release, no PRs or Issues will be included. The diff links will still be generated.</p> <p>It is very useful for the first release of a project, where there is no previous release to compare to, or there is a huge amount of noise in the changelog from the initial commits.</p> <p>See the CHANGELOG for this project for an example of this in action, and the configuration file that was used to generate it.</p> <p>Again, the more verbose format is probably easier to read if you have a lot of text to add:</p> <pre><code>[[changelog_generator.release_overrides]]\nrelease = \"1.2.3\"\ntext = \"\"\"\n**Replacement Text**\n\nThis is **replacement text** for the release notes of version 1.2.3.\n\nNo autogenerated text will be included in the release notes for this version.\n\"\"\"\n</code></pre>"},{"location":"usage/options/#mark-a-release-as-yanked","title":"Mark a release as \"Yanked\"","text":"<p>Sometimes you may need to mark a release as \"Yanked\" (or \"Retracted\") for various reasons. You can do this using the <code>yanked</code> setting in the config file. This is a list of dictionaries, with each dictionary containing the <code>release</code> and <code>reason</code> keys. For example, if you want to mark the <code>1.2.3</code> release as \"Yanked\", you could add the following to your config file:</p> <pre><code>yanked = [\n  { release = \"1.2.3\", reason = \"Ooooh, nasty nasty bug - use 1.2.4 instead!!!\" }\n]\n</code></pre> <p>Tip</p> <p>This only marks the release in the Changelog. It is up to you to actually remove/yank the release on GitHub, PyPI or wherever you have published it.</p> <p>For an example of how this looks in the changelog, see below for an example from this very project:</p> <p></p> <p>You can add as many releases as you want to this list, just add more dictionaries to the array - you can also use the more verbose format for arrays as mentioned above. There is NO command-line equivalent for this setting.</p>"}]}